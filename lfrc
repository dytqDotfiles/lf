######################
# Customize behavior #
######################

#anchorfind     bool      on
#dircounts      bool      off
#dirfirst       bool      on
#drawbox        bool      off
#errorfmt       string    "\033[7;31;47m%s\033[0m"
#filesep        string    "\n"
#findlen        int       1
#globsearch     bool      off
#hidden         bool      off
#hiddenfiles    []default '.*'
#icons          bool      off
#ifs            string    ''
#ignorecase     bool      on
#ignoredia      bool      on
#incsearch      bool      off
#info           []default ''
#number         bool      off
#period         int       0
#preview        bool      on
#previewer      string    ''
#cleaner        string    ''
#promptfmt      string    "\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[1m%f\033[0m"
#ratios         []default '1:2:3'
#relativenumber bool      off
#reverse        bool      off
#scrolloff      int       0
#shell          string    'sh' for unix and 'cmd' for windows
#shellopts      []default ''
#smartcase      bool      on
#smartdia       bool      off
#sortby         string    'natural'
#tabstop        int       8
#timefmt        string    'Mon Jan _2 15:04:05 2006'
#truncatechar   string    '~'
#wrapscan       bool      on
#wrapscroll     bool      off

##########
# Keymap #
##########

#quit                     'q'
#up                       'k' and '<up>'
#half-up                  '<c-u>'
#page-up                  '<c-b>' and '<pgup>'
#down                     'j' and '<down>'
#half-down                '<c-d>'
#page-down                '<c-f>' and '<pgdn>'
#updir                    'h' and '<left>'
#open                     'l' and '<right>'
#top                      'gg' and '<home>'
#bottom                   'G' and '<end>'
#toggle
#invert                   'v'
#unselect                 'u'
#glob-select
#glob-unselect
#copy                     'y'
#cut                      'd'
#paste                    'p'
#clear                    'c'
#sync
#draw
#redraw                   '<c-l>'
#load
#reload                   '<c-r>'
#echo
#echomsg
#echoerr
#cd
#select
#delete         
#rename            'r'
#source
#push
#read              ':'
#shell             '$'
#shell-pipe        '%'
#shell-wait        '!'
#shell-async       '&'
#find              'f'
#find-back         'F'
#find-next                ';'
#find-prev               ','
#search            '/'
#search-back       '?'
#search-next             'n'
#search-prev              'N'
#mark-save         'm'
#mark-load         "'"
#mark-remove       '"'


##############
# Keymap cmd #
##############

#cmd-escape               '<esc>'
#cmd-complete             '<tab>'
#cmd-menu-complete
#cmd-menu-complete-back
#cmd-enter                '<c-j>' and '<enter>'
#cmd-interrupt            '<c-c>'
#cmd-history-next         '<c-n>'
#cmd-history-prev         '<c-p>'
#cmd-left                 '<c-b>' and '<left>'
#cmd-right                '<c-f>' and '<right>'
#cmd-home                 '<c-a>' and '<home>'
#cmd-end                  '<c-e>' and '<end>'
#cmd-delete               '<c-d>' and '<delete>'
#cmd-delete-back          '<backspace>' and '<backspace2>'
#cmd-delete-home          '<c-u>'
#cmd-delete-end           '<c-k>'
#cmd-delete-unix-word     '<c-w>'
#cmd-yank                 '<c-y>'
#cmd-transpose            '<c-t>'
#cmd-transpose-word       '<a-t>'
#cmd-word                 '<a-f>'
#cmd-word-back            '<a-b>'
#cmd-delete-word          '<a-d>'
#cmd-capitalize-word      '<a-c>'
#cmd-uppercase-word       '<a-u>'
#cmd-lowercase-word       '<a-l>'

##########
# config #
##########

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

#############
# other cmd #
#############

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd delete ${{
     set -f
     printf "$fx\n"
     printf "delete?[y/n]"
     read ans
     [ $ans = "y" ] && rm -rf $fx
}}

cmd open ${{
    case $(file --mime-type $f -b) in
	image/vnd.djvu|application/pdf|application/octet-stream) setsid -f evince $fx >/dev/null 2>&1 ;;
        text/*) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
	audio/*) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) setsid -f evince $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}
